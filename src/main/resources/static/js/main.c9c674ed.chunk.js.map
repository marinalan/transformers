{"version":3,"sources":["store/actions/transformers.js","store/actions/actionTypes.js","components/UI/LoadingComponent.js","components/TransformerView.js","components/TransformerEdit.js","components/MainPanel.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/transformers.js","index.js"],"names":["instance","axios","create","baseURL","fetchTransformersFailed","error","type","payload","Loading","react_default","a","createElement","className","TransformerView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","popoverOpen","state","toggleDelTooltip","delTooltipOpen","toggleEditTooltip","editTooltipOpen","toggleViewTooltip","viewTooltipOpen","popupClick","event","preventDefault","editClick","edit","transformer","deleteClick","delete","handleSelChange","isSel","target","checked","select","id","_this2","presentation","index_es","icon","faEdit","onClick","Tooltip","placement","isOpen","style","backgroundColor","color","faEraser","faList","Popover","PopoverHeader","as","PopoverBody","strength","intelligence","speed","endurance","rank","courage","firepower","skill","overallRating","Input","value","onChange","Component","notEmptyValid","val","trim","intRange","isNaN","TransformerEdit","prevProps","values","close","save","Modal","ModalHeader","ModalBody","lib","onSubmit","handleSubmit","initialState","Row","Col","Label","htmlFor","model","name","text","placeholder","validators","show","messages","range","Button","MainPanel","editTransformer","edTransformer","saveTransformer","saveNewTransformer","closeEditor","deleteTransformer","newClick","selItem","sel","selected","concat","filter","n","battleClick","battle","isEditorOpen","loadTransformers","toString","loading","LoadingComponent_Loading","transformers","map","components_TransformerView","key","Fragment","components_TransformerEdit","Card","CardBody","CardText","battleResult","connect","dispatch","get","then","response","data","catch","message","put","actions","newTrans","prop","post","status","removeItem","App","Navbar","dark","NavbarBrand","href","components_MainPanel","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","objectSpread","dataProcessing","dataProcessingError","battleProcessing","reducer","arguments","length","undefined","action","theTransformer","composeEnhancers","compose","rootReducer","combineReducers","transformersReducer","store","createStore","applyMiddleware","thunk","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9c674ed.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n//import makeCorsRequest from '../../corsRequester';\n\nconst instance = axios.create({\n    //baseURL: 'http://192.168.1.109:8080/'//May be need to change\n    baseURL: '/'  //May be need to change\n});\n\n\nexport const setTransformersLoading = () => {\n    return {\n        type: actionTypes.TRANSFORMERS_LOADING\n    };\n}\n\nexport const setTransformers = (transformers) => {\n    return {\n        type: actionTypes.SET_TRANSFORMERS,\n        payload: transformers\n    };\n};\n\nexport const fetchTransformersFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_TRANSFORMERS_FAILED,\n        payload: \"\" + error\n    };\n};\n\n\nexport const loadTransformers = () => {\n    return dispatch => {\n        dispatch(setTransformersLoading());\n        instance.get('bots/')\n            .then(response => {\n                dispatch(setTransformers(response.data));\n            })\n            .catch(error => {\n                dispatch(fetchTransformersFailed(error.message));\n            });\n    };\n}\n\n//************************************************************************************\n\nexport const setDataProcessing = () => {\n    return {\n        type: actionTypes.DATA_PROCESSING\n    };\n}\n\nexport const dataProcessFailed = (error) => {\n    return {\n        type: actionTypes.DATA_PROCESS_FAILED,\n        payload: \"\" + error\n    };\n};\n\nexport const setUpdatedItem = (transformer) => {\n    return {\n        type: actionTypes.SET_UPDATEDITEM,\n        payload: transformer\n    };\n};\n\nexport const addNewItem = (transformer) => {\n    return {\n        type: actionTypes.ADD_NEWITEM,\n        payload: transformer\n    };\n}\n\nexport const saveTransformer = (transformer) => {\n    return dispatch => {\n        dispatch(setDataProcessing());\n        instance.put('bots/update/' + transformer.id, transformer)\n            .then(response => {\n                dispatch(setUpdatedItem(response.data));\n            })\n            .catch(error => {\n                dispatch(fetchTransformersFailed(error.message));\n            });\n    }\n}\n\nexport const saveNewTransformer = (transformer) => {\n    return dispatch => {\n        dispatch(setDataProcessing());\n        const newTrans = {};\n        for (let prop in transformer) {\n            if (prop !== 'id')\n                newTrans[prop] = transformer[prop];\n        }\n\n        instance.post('bots/create', newTrans)\n            .then(response => {\n                dispatch(addNewItem(response.data));\n            })\n            .catch(error => {\n                dispatch(fetchTransformersFailed(error.message));\n            });\n    }\n}\n\nexport const removeItem = (id) => {\n    return {\n        type: actionTypes.SET_REMOVEITEM,\n        payload: id\n    };\n}\n\nexport const deleteTransformer = (transformer) => {\n    return dispatch => {\n        const id = transformer.id;\n        dispatch(setDataProcessing());\n        instance.delete('bots/delete/' + transformer.id)\n            .then(response => {\n                if (response.status === 204) {\n                    dispatch(removeItem(id));\n                } else {\n                    dispatch(dataProcessFailed('Network Error'));\n                }\n            })\n            .catch(error => {\n                dispatch(fetchTransformersFailed(error.message));\n            });\n    }\n}\n\n//*****************************************************************************\n\nexport const setBattleProcessing = () => {\n    return {\n        type: actionTypes.SET_BATTLEPROCESSING\n    };\n}\n\nexport const setBattleResult = (battleResult) => {\n    return {\n        type: actionTypes.SET_BATTLERESULT,\n        payload: battleResult\n    };\n}\n\nexport const battle = (transformers) => {\n    return dispatch => {\n        dispatch(setBattleProcessing());\n        instance.post('bots/detertmine-winner', transformers)\n            .then(response => {\n                dispatch(setBattleResult(response.data.presentation));\n            })\n            .catch(error => {\n                dispatch(fetchTransformersFailed(error.message));\n            });\n    }\n}","export const SET_TRANSFORMERS = 'SET_TRANSFORMERS';\nexport const FETCH_TRANSFORMERS_FAILED = 'FETCH_TRANSFORMERS_FAILED';\nexport const TRANSFORMERS_LOADING = 'TRANSFORMERS_LOADING';\n\nexport const DATA_PROCESSING = 'DATA_PROCESSING';\nexport const DATA_PROCESS_FAILED = 'DATA_PROCESS_FAILED';\nexport const SET_UPDATEDITEM = 'SET_UPDATEDITEM';\nexport const SET_REMOVEITEM = 'SET_REMOVEITEM';\nexport const ADD_NEWITEM = 'ADD_NEWITEM';\n\nexport const SET_BATTLEPROCESSING = 'SET_BATTLEPROCESSING';\nexport const SET_BATTLERESULT = 'SET_BATTLERESULT';","import React from 'react';\n\nexport const Loading = () => {\n    return (\n        <div className='col-12'>\n            <span className='fa fa-spinner fa-pulse fa-3x fa-fw text-primary'></span>\n            <p>Loading . . .</p>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { Popover, PopoverHeader, PopoverBody, Tooltip, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faEraser, faList } from '@fortawesome/free-solid-svg-icons';\n\n\nclass TransformerView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            popoverOpen: false,\n            delTooltipOpen: false,\n            editTooltipOpen: false,\n            viewTooltipOpen: false,\n            isSel: false\n        };\n    }\n\n    toggle = () => {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    toggleDelTooltip = () => {\n        this.setState({\n            delTooltipOpen: !this.state.delTooltipOpen\n        });\n    }\n\n    toggleEditTooltip = () => {\n        this.setState({\n            editTooltipOpen: !this.state.editTooltipOpen\n        });\n    }\n\n    toggleViewTooltip = () => {\n        this.setState({\n            viewTooltipOpen: !this.state.viewTooltipOpen\n        });\n    }\n\n    popupClick = (event) => {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n        event.preventDefault();\n    }\n\n    editClick = (event) => {\n        this.props.edit(this.props.transformer);\n        event.preventDefault();\n    }\n\n    deleteClick = (event) => {\n        this.props.delete(this.props.transformer);\n        event.preventDefault();\n    }\n\n    handleSelChange = (event) => {\n        this.setState({isSel: event.target.checked });\n        this.props.select(this.props.transformer.id, event.target.checked);\n    }\n\n    render() {\n        return (\n            <div className='row'>\n                <div className='col-6'>\n                    {this.props.transformer.presentation}\n                </div>\n                <div className='col-2'>\n                    <FontAwesomeIcon icon={faEdit} onClick={(event) => this.editClick(event)} className='ml-2 mr-1' id={'btnEdit' + this.props.transformer.id} />\n                    <Tooltip placement=\"top\" isOpen={this.state.editTooltipOpen}\n                        target={'btnEdit' + this.props.transformer.id} toggle={() => this.toggleEditTooltip()}\n                        style={{ backgroundColor: 'Yellow', color: 'blue' }} >\n                        Edit Transformer\n                    </Tooltip>\n\n                    <FontAwesomeIcon icon={faEraser} onClick={(event) => this.deleteClick(event)} className='ml-1 mr-1' id={'btnDelete' + this.props.transformer.id} />\n                    <Tooltip placement=\"top\" isOpen={this.state.delTooltipOpen}\n                        target={'btnDelete' + this.props.transformer.id} toggle={() => this.toggleDelTooltip()}\n                        style={{ backgroundColor: 'Yellow', color: 'blue' }} >\n                        Delete Transformer\n                    </Tooltip>\n\n                    <FontAwesomeIcon icon={faList} onClick={(event) => this.popupClick(event)} className='ml-1 mr-1' id={'btnPopover' + this.props.transformer.id} />\n                    <Tooltip placement=\"top\" isOpen={this.state.viewTooltipOpen}\n                        target={'btnPopover' + this.props.transformer.id} toggle={() => this.toggleViewTooltip()}\n                        style={{ backgroundColor: 'Yellow', color: 'blue' }} >\n                        View Transformer\n                    </Tooltip>\n                    <Popover placement=\"top\" isOpen={this.state.popoverOpen} target={'btnPopover' + this.props.transformer.id} >\n                        <PopoverHeader as=\"h3\">Transformer</PopoverHeader>\n                        <PopoverBody>\n                            <ul className=\"list-unstyled\">\n                                <li><strong>Id:</strong>  {this.props.transformer.id} </li>\n                                <li><strong>Type:</strong> {this.props.transformer.type}</li>\n                                <li><strong>Strength:</strong> {this.props.transformer.strength}</li>\n                                <li><strong>Intelligence:</strong> {this.props.transformer.intelligence}</li>\n                                <li><strong>Speed:</strong> {this.props.transformer.speed}</li>\n                                <li><strong>Endurance:</strong> {this.props.transformer.endurance}</li>\n                                <li><strong>Rank:</strong> {this.props.transformer.rank}</li>\n                                <li><strong>Courage:</strong> {this.props.transformer.courage}</li>\n                                <li><strong>Firepower:</strong> {this.props.transformer.firepower}</li>\n                                <li><strong>Skill:</strong> {this.props.transformer.skill}</li>\n                                <li><strong>Overall Rating:</strong> {this.props.transformer.overallRating}</li>\n                                <li><strong>Presentation:</strong> {this.props.transformer.presentation}</li>\n                            </ul>\n                        </PopoverBody>\n                    </Popover>\n                </div>\n                <div className='col-2'>\n                    <Input type=\"checkbox\" value={this.state.isSel} onChange={(event) => this.handleSelChange(event)} />{' '}For battle\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TransformerView;","import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Label, Col, Row } from 'reactstrap';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst notEmptyValid = val => val.trim() !== '';\n\nconst intRange = val => {\n    if (isNaN(val))\n        return false;\n    val = +val;\n    const res = (1 <= val && val <= 10);\n    return res;\n}\n\nclass TransformerEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            transformer: null\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.transformer !== prevProps.transformer) {\n            if (this.props.transformer !== this.state.transformer) {\n                this.setState({ transformer: this.props.transformer });\n            }\n        }\n    }\n\n    handleSubmit(values) {\n        this.props.close();\n        this.props.save(values);\n    }\n\n    render() {\n        return (\n            <Modal isOpen={this.state.transformer !== null}>\n                <ModalHeader toggle={() => this.props.close()}>Transformer Editor</ModalHeader>\n                <ModalBody>\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)} initialState={this.state.transformer}>\n                        <Row className='form-group'>\n                            <Col>\n                                <Label htmlFor='type'>Type</Label>\n                                <Control.select model=\".type\" name=\"type\" className='form-control'>\n                                    <option>Autobot</option>\n                                    <option>Decepticon</option>\n                                </Control.select>\n                            </Col>\n                            <Col>\n                                <Label htmlFor='name'>Name</Label>\n                                <Control.text model='.name' id='name' name='name' placeholder='Name' className='form-control' validators={{ name: notEmptyValid }} />\n                                <Errors className='text-danger' model='.name' show='touched' messages={{\n                                    name: \"Name can't be empty\"\n                                }} />\n                            </Col>\n                        </Row>\n                        <Row className='form-group'>\n                            <Col>\n                                <Label htmlFor='strength'>Strength</Label>\n                                <Control.text model='.strength' id='strength' name='strength' placeholder='Strength' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.strength' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                            <Col>\n                                <Label htmlFor='intelligence'>Intelligence</Label>\n                                <Control.text model='.intelligence' id='intelligence' name='intelligence' placeholder='Intelligence' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.intelligence' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                        </Row>\n                        <Row className='form-group'>\n                            <Col>\n                                <Label htmlFor='speed'>Speed</Label>\n                                <Control.text model='.speed' id='speed' name='speed' placeholder='Speed' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.speed' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                            <Col>\n                                <Label htmlFor='endurance'>Endurance</Label>\n                                <Control.text model='.endurance' id='endurance' name='endurance' placeholder='Endurance' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.endurance' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                        </Row>\n                        <Row className='form-group'>\n                            <Col>\n                                <Label htmlFor='rank'>Rank</Label>\n                                <Control.text model='.rank' id='rank' name='rank' placeholder='Rank' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.rank' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                            <Col>\n                                <Label htmlFor='courage'>Courage</Label>\n                                <Control.text model='.courage' id='courage' name='courage' placeholder='Courage' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.courage' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                        </Row>\n                        <Row className='form-group'>\n                            <Col>\n                                <Label htmlFor='firepower'>Firepower</Label>\n                                <Control.text model='.firepower' id='firepower' name='firepower' placeholder='Firepower' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.firepower' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                            <Col>\n                                <Label htmlFor='skill'>Skill</Label>\n                                <Control.text model='.skill' id='skill' name='skill' placeholder='Skill' className='form-control' validators={{ range: intRange }} />\n                                <Errors className='text-danger' model='.skill' show='touched' messages={{\n                                    range: 'Must be greater than 1 <= value <= 10'\n                                }} />\n                            </Col>\n                        </Row>\n                        <Row className='form-group'>\n                            <Col>\n                                <Button type='submit' color='primary'>Submit</Button>\n                            </Col>\n                        </Row>\n                    </LocalForm>\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\nexport default TransformerEdit;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardText } from 'reactstrap';\n\n\nimport * as actions from '../store/actions/transformers';\nimport { Loading } from './UI/LoadingComponent';\nimport TransformerView from './TransformerView';\nimport TransformerEdit from './TransformerEdit';\n\nclass MainPanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditorOpen: false,\n            edTransformer: null,\n            selected: []\n        }\n    }\n\n\n    componentDidMount() {\n        this.props.loadTransformers();\n    }\n\n    editTransformer = (transformer) => {\n        this.setState({ edTransformer: transformer });\n    };\n\n    saveTransformer = (transformer) => {\n        if (transformer.id >= 0)\n            this.props.saveTransformer(transformer);\n        else\n            this.props.saveNewTransformer(transformer);\n    }\n\n    closeEditor = () => {\n        this.setState({ edTransformer: null });\n    }\n\n    deleteTransformer = (transformer) => {\n        //console.log(transformer);\n        this.props.deleteTransformer(transformer);\n    };\n\n    newClick = (event) => {\n        const transformer = {\n            id: -1,\n            name: '',\n            type: 'Autobot',\n            strength: '',\n            intelligence: '',\n            speed: '',\n            endurance: '',\n            rank: '',\n            courage: '',\n            firepower: '',\n            skill: ''\n        };\n        this.setState({ edTransformer: transformer });\n    }\n\n    selItem = (id, sel) => {\n        let selected = this.state.selected;\n        if (sel) {\n            selected = selected.concat([id]);\n        } else {\n            selected = selected.filter(n => n !== id);\n        }\n        this.setState({ selected: selected });\n    }\n\n    battleClick = (event) => {\n        this.props.battle(this.state.selected);\n    }\n\n    render() {\n        const error = this.props.error === '' ? null : <h3>{'' + this.props.error.toString()}</h3>;\n        const loading = this.props.loading ? <Loading /> : null;\n        const transformers = this.props.transformers === null ? null : this.props.transformers.map(transformer => {\n            return <TransformerView key={transformer.id} transformer={transformer}\n                edit={transformer => this.editTransformer(transformer)}\n                delete={transformer => this.deleteTransformer(transformer)}\n                select={(id, sel) => this.selItem(id, sel)} />;\n        });\n\n        return (\n            <>\n                <TransformerEdit transformer={this.state.edTransformer} close={() => this.closeEditor()} save={(transformer) => this.saveTransformer(transformer)} />\n                <div className=\"container\">\n                    <Card>\n                        <CardBody>\n                            <button type=\"button\" className=\"btn btn-success mr-1\" onClick={(event) => this.newClick(event)} >New Transformer</button>\n                            <button type=\"button\" className=\"btn btn-success ml-1\" onClick={(event) => this.battleClick(event)} >Battle</button>\n                            <CardText>\n                                <pre>{this.props.battleResult}</pre>\n                            </CardText>\n                        </CardBody>\n                    </Card>\n                    {error}\n                    {loading}\n                    {transformers}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        transformers: state.transformers.transformers,\n        loading: state.transformers.loading,\n        error: state.transformers.error,\n        battleResult: state.transformers.battleResult\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loadTransformers: () => dispatch(actions.loadTransformers()),\n        saveTransformer: (transformer) => dispatch(actions.saveTransformer(transformer)),\n        saveNewTransformer: (transformer) => dispatch(actions.saveNewTransformer(transformer)),\n        deleteTransformer: (transformer) => dispatch(actions.deleteTransformer(transformer)),\n        battle: (transformers) => dispatch(actions.battle(transformers))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPanel);","import React from 'react';\nimport './App.css';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport MainPanel from './components/MainPanel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar dark color=\"primary\">\n        <div className=\"container\">\n          <NavbarBrand href=\"/\">Transformers Test</NavbarBrand>\n        </div>\n      </Navbar>\n      <MainPanel />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n}\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../../shared/utility';\n\nconst initialState = {\n    loading: false,\n    dataProcessing: false,\n    error: '',\n    dataProcessingError: '',\n    transformers: null,\n    battleProcessing: false,\n    battleResult: ''\n}\n\nfunction setUpdatedTransformer(transformers, transformer) {\n    if (transformers === null) //Never will be\n        transformers = [];\n    return transformers.map(theTransformer => theTransformer.id === transformer.id ? transformer : theTransformer);\n}\n\nfunction removeItem(transformers, id) {\n    if (transformers === null) //Never will be\n        transformers = [];\n    return transformers.filter(transformer => transformer.id !== id);\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TRANSFORMERS_LOADING:\n            return updateObject(state, {\n                loading: true,\n                dataProcessing: false,\n                error: '',\n                dataProcessingError: '',\n                transformers: null,\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.FETCH_TRANSFORMERS_FAILED:\n            return updateObject(state, {\n                loading: false,\n                dataProcessing: false,\n                error: action.payload,\n                dataProcessingError: '',\n                transformers: null,\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.SET_TRANSFORMERS:\n            return updateObject(state, {\n                loading: false,\n                dataProcessing: false,\n                error: '',\n                dataProcessingError: '',\n                transformers: action.payload,\n                battleProcessing: false,\n                battleResult: ''\n            });\n\n        case actionTypes.DATA_PROCESSING:\n            return updateObject(state, {\n                dataProcessing: true,\n                dataProcessingError: '',\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.DATA_PROCESS_FAILED:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: action.payload,\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.SET_UPDATEDITEM:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: '',\n                transformers: setUpdatedTransformer(state.transformers, action.payload),\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.SET_REMOVEITEM:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: '',\n                transformers: removeItem(state.transformers, action.payload),\n                battleProcessing: false,\n                battleResult: ''\n            });\n        case actionTypes.ADD_NEWITEM:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: '',\n                transformers: state.transformers.concat([action.payload]),\n                battleProcessing: false,\n                battleResult: ''\n            });\n\n        case actionTypes.SET_BATTLEPROCESSING:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: '',\n                battleProcessing: true,\n                battleResult: ''\n            });\n        case actionTypes.SET_BATTLERESULT:\n            return updateObject(state, {\n                dataProcessing: false,\n                dataProcessingError: '',\n                battleProcessing: false,\n                battleResult: action.payload\n            });\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport transformersReducer from './store/reducers/transformers';\n\nconst composeEnhancers = (process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null) || compose;\n\nconst rootReducer = combineReducers({\n    transformers: transformersReducer\n});\n\nconst store = createStore(rootReducer, \n    composeEnhancers(applyMiddleware(thunk))    \n);\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}